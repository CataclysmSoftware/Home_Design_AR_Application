//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Runtime/Controllers/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""MoveCamera"",
            ""id"": ""daf93932-784b-4870-b45e-084c7604c1c1"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""54e57602-5a9a-41b4-a58a-390909fbc49f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""794f93e1-1f90-44c9-bd1d-5e90de1ae095"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveHeight"",
                    ""type"": ""Button"",
                    ""id"": ""ff23761c-4b87-434f-bd7a-678e49f4f1a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0c48d0ea-24aa-450c-ac95-b5dbc3854fe7"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ef94594-3713-4af8-9386-a43108f00cf8"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""082abbf2-485e-477a-b08c-2d4d786c586d"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveHeight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MoveCamera
        m_MoveCamera = asset.FindActionMap("MoveCamera", throwIfNotFound: true);
        m_MoveCamera_Move = m_MoveCamera.FindAction("Move", throwIfNotFound: true);
        m_MoveCamera_Rotate = m_MoveCamera.FindAction("Rotate", throwIfNotFound: true);
        m_MoveCamera_MoveHeight = m_MoveCamera.FindAction("MoveHeight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MoveCamera
    private readonly InputActionMap m_MoveCamera;
    private IMoveCameraActions m_MoveCameraActionsCallbackInterface;
    private readonly InputAction m_MoveCamera_Move;
    private readonly InputAction m_MoveCamera_Rotate;
    private readonly InputAction m_MoveCamera_MoveHeight;
    public struct MoveCameraActions
    {
        private @InputController m_Wrapper;
        public MoveCameraActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MoveCamera_Move;
        public InputAction @Rotate => m_Wrapper.m_MoveCamera_Rotate;
        public InputAction @MoveHeight => m_Wrapper.m_MoveCamera_MoveHeight;
        public InputActionMap Get() { return m_Wrapper.m_MoveCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveCameraActions set) { return set.Get(); }
        public void SetCallbacks(IMoveCameraActions instance)
        {
            if (m_Wrapper.m_MoveCameraActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_MoveCameraActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MoveCameraActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MoveCameraActionsCallbackInterface.OnMove;
                @Rotate.started -= m_Wrapper.m_MoveCameraActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_MoveCameraActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_MoveCameraActionsCallbackInterface.OnRotate;
                @MoveHeight.started -= m_Wrapper.m_MoveCameraActionsCallbackInterface.OnMoveHeight;
                @MoveHeight.performed -= m_Wrapper.m_MoveCameraActionsCallbackInterface.OnMoveHeight;
                @MoveHeight.canceled -= m_Wrapper.m_MoveCameraActionsCallbackInterface.OnMoveHeight;
            }
            m_Wrapper.m_MoveCameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @MoveHeight.started += instance.OnMoveHeight;
                @MoveHeight.performed += instance.OnMoveHeight;
                @MoveHeight.canceled += instance.OnMoveHeight;
            }
        }
    }
    public MoveCameraActions @MoveCamera => new MoveCameraActions(this);
    public interface IMoveCameraActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnMoveHeight(InputAction.CallbackContext context);
    }
}
